<span id="link" class="d-none">
<md>[_User Guide → Reusing Contents → Variables_]({{ baseUrl }}/userGuide/reusingContents.html#variables)</md>
</span>

## Variables

<span id="overview">

**MarkBind variables are ideal for reusing small bits of code** in multiple places; you can define a variable to represent the code bit in question and reuse it anywhere in the site by referring the variable instead of duplicating the code bit.
</span>

### Global Variables

**Global variables are to be defined in the `_markbind/variables.md` file.** Each variable must have an `name` and the value can be any MarkBind-compliant code fragment. The `name` should not contain `-` and `.`. For example, `search-option` and `search.options` are not allowed.

The variables declared here are available from anywhere in the code base.

<div class="indented">

{{ icon_example }} Here's how you can define two variables `year` and `options`:

```html {.no-line-numbers}
<variable name="year">2018</variable>

<variable name="options">
* yes
* no
* maybe
</variable>
```
</div>

To include a variable value in your code, give the variable id enclosed in double curly braces.

<div class="indented">

{{ icon_example }} `The year was {% raw %}{{ year }}{% endraw %}.` {{ icon_arrow_right }} The year was 2018.

</div>

#### Default values for variables

You can also specify a default value for a variable, which is displayed when the variable is not specified in `variables.md` and by any of the [includes]({{ baseUrl }}/userGuide/reusingContents.html#the-include-tag) of the page. This is done by adding `or defaultValue` within the curly braces.

<div class="indented">

{{ icon_example }} `My name is {% raw %}{{ name or "Anonymous" }}{% endraw %}.` {{ icon_arrow_right }} My name is Anonymous.
</div>



#### Built-in Global Variables

MarkBind also provides a number of built-in variables.

Variable | Notes | {{ icon_example }} | Output
--- | --- | --- | ---
`baseUrl` | Represents the root directory of the site on the server, as configured in your [site configuration]({{baseUrl}}/userGuide/siteConfiguration.html#baseurl) file. <br> Used for specifying [intra-site links](links.mbdf#intraSiteLinks"). | If `baseUrl` is specified as `userGuide/`:<br><br> `<img src="{% raw %}{{baseUrl}}{% endraw %}/images/logo.png" />` | `<img src="userGuide/images/logo.png" />`
`timestamp` | The time stamp that indicates when the page was generated. <br><br> The [default]({{baseUrl}}/userGuide/siteConfiguration.html#timezone) values of `"timeZone"` and `"locale"` are `"UTC"` and `"en-GB"` respectively.  | The following example showcases the use of the `"Asia/Singapore"` time zone.<br><br> `Page generated at: {% raw %}{{timestamp}}{% endraw %}` | `Page generated at: {{ timestamp }}`
`MarkBind` | The MarkBind version in use, linked to the MarkBind website. | `Page generated by: {% raw %}{{MarkBind}}{% endraw %}`  | `Page generated by:` {{ MarkBind | safe }}


### Page Variables

**You can also declare variables for use within a single page.** These variables work exactly the same as regular variables, except that their values only apply to the page they are declared in. This can be done by using the `<variable>` tag.

<div class="indented">

{{ icon_example }} Declaring page variables: `<variable name="full_name">John Doe</variable>`<br>

{{ icon_example }} Using page variables: `My name is {% raw %}{{ full_name }}. This is {{ full_name }}{% endraw %}'s site.`
</div>

<box type="warning">
 
These variables will not be applied to [`<include>` files]({{ baseUrl }}/userGuide/reusingContents.html#the-include-tag). Additionally, global variables (`_markbind/variables.md`) will take precedence over any page variables. *See also: [Specifying Variables in an `<include>`]({{ baseUrl }}/userGuide/reusingContents.html#specifying-variables-in-an-include)*.
</box>


### Importing Variables

**You can access [page variables](#page-variables) from another page by importing them.**

<div class="indented">

{{ icon_example }} Importing specific variables from `person.md` into `coverpage.md`:

In `person.md`,
```html {.no-line-numbers}
<variable name="address">123 Sun Avenue</variable>
<variable name="name">Mark</variable>
<variable name="phone">123456789</variable>
```

and in `coverpage.md`,

```html {.no-line-numbers}
<import address name from="person.md"/>
```

{% raw %}will allow you to access the variables as per normal: `{{address}}`, `{{name}}`, `{{phone}}`.{% endraw %}

</div>

**When importing all variables, you should attach a _namespace_** to the imported variables using an `as` attributes.

<div class="indented">

{{ icon_example }} Importing all variables with namespaces:

In `coverpage.md`,
```html {.no-line-numbers}
<import from="page.md" as="details"/>
```

{% raw %}

|    Detail    | How to access         
| :------------- |:-------------
| address | `{{details.address}}`
| name | `{{details.name}}`
| phone | `{{details.phone}}`

This way, ***all*** variables in `page.md` are accessible via `{{details.<variable_name>}}`.
{% endraw %}

</div>

<box type="warning" header="Mixing namespaces with variable names">

You can also mix the two syntaxes for importing page variables, though it is not recommended:
```html {.no-line-numbers}
<import address name from="page.md" as="details"/>
```

This may seem like it will import *only* `address` and `name` from `page.md` and storing them in the namespace `details`.

However, this is a combination of *both* syntaxes above, and thus this will allow you to:

{% raw %}
- access `address` and `name` (but NOT `phone`) with `{{address}}` and `{{name}}`
- access `address`, `name`, and `phone` with `{{details.address}}`, `{{details.name}}`, and `{{details.phone}}`
{% endraw %}

</box>

<box type="important" header="Precedence of imported variables">

Note that global variables (`_markbind/variables.md`) and [page variables](#page-variables) will take precedence over any imported variables.

This also applies for namespaces {{ icon_arrow_right }} for instance, in the earlier example, `details` is treated as the variable name and is subject to the same rules as other variables, such as global variables taking precedence, and later declarations overriding previous ones:

```html {.no-line-numbers}
<import from="title.md" as="book"/>
<import from="index.md" as="book"/>
```

In this case, all the variables in `title.md` are not accessible, as they are overwritten with the variables from `index.md`.

</box>

### Defining variables with JSON

You could also have your variables defined in a JSON file to define multiple variables in a more concise manner.

{{ icon_example }}
`variables.md`:
```html {.no-line-numbers}
<variable from="variables.json" />
```

`variables.json`:
```json {.no-line-numbers}
{
  "variable1": "This is the first variable",
  "variable2": "This is the second variable"
}
```

Variables defined in JSON file will be scoped according to where it is being referenced.


### Tips and Tricks for variables

<br>
<box type="success" seamless header="##### Referring to other variables in variables">

{% raw %}
This variable uses a built-in variable:<br>
`<variable name="time">{{ timestamp }}</variable>`

Here, the second variable will be assigned the contents of the first variable.<br>
`<variable name="first">This is the first variable.</variable>`<br>
`<variable name="second">{{ first }}</variable>`<br>

This will not work, as the `fourth` variable is declared _below_ the line that refers to it.<br>
`<variable name="third">{{ fourth }}</variable>` :x:<br>
`<variable name="fourth">This is the fourth variable.</variable>`
{% endraw %}

</box>
<br>
<box type="success" seamless header="##### Variables can contain malformed html">

MarkBind uses a patched version of the excellent [htmlparser2](https://github.com/fb55/htmlparser2) that allows `<variable>` tags
to contain any content - even incomplete or malformed html!

{{ icon_example }} You can use this to build html from incomplete html code snippets:

```html {.no-line-numbers}
<variable name="front_center"><div style="text-align: center;"></variable>
<variable name="front_right"><div style="text-align: right;"></variable>
<variable name="back"></div></variable>
```

And to use it:

<variable name="front_center"><div style="text-align: center;"></variable>
<variable name="front_right"><div style="text-align: right;"></variable>

<variable name="back"></div></variable>

{{ icon_example }}
{% raw %}`{{ front_center | safe }} centered {{ back | safe }}`{% endraw %} {{icon_arrow_right}} {.my-2}

<div class="indented">
<box border-left-color="grey" background-color="white">
{{ front_center | safe }} centered {{ back | safe }}
</box>
</div>


{{ icon_example }}
{% raw %}`{{ front_right | safe }} right aligned {{ back | safe }}`{% endraw %} {{icon_arrow_right}} {.my-2}

<div class="indented">
<box border-left-color="grey" background-color="white">
{{ front_right | safe }} right aligned {{ back | safe }}
</box>
</div>

<box type="warning">

Remember to also use the `safe` nunjucks filter when rendering your variables as raw html!
</box>
</box>

</span>

<span id="short" class="d-none">

Global variables:

`_markbind/variables.md`:
```html
<variable name="year">2018</span>
```

`The year was {% raw %}{{ year }}{% endraw %}.`

Page variables:<br>
`<variable name="full_name">John Doe</variable>`{.html}

`The name was {% raw %}{{ full_name }}{% endraw %}.`


</span>
