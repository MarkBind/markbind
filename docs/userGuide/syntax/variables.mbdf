<span id="link" class="d-none">
<md>[_User Guide → Reusing Contents → Variables_]({{ baseUrl }}/userGuide/reusingContents.html#variables)</md>
</span>

## Variables

<span id="overview">

**MarkBind variables are ideal for reusing small bits of code** in multiple places; you can define a variable to represent the code bit in question and reuse it anywhere in the site by referring the variable instead of duplicating the code bit.
</span>

### Global Variables

**Global variables are to be defined in the `_markbind/variables.md` file.** Each variable must have an `name` and the value can be any MarkBind-compliant code fragment. The `name` should not contain `-` and `.`. For example, `search-option` and `search.options` are not allowed.

<div class="indented">

{{ icon_example }} Here's how you can define two variables `year` and `options`:

```html
<variable name="year">2018</variable>

<variable name="options">
* yes
* no
* maybe
</variable>
```
</div>

To include a variable value in your code, give the variable id enclosed in double curly braces.

<div class="indented">

{{ icon_example }} Here's how you can use the variable `year`:

<code>The year was {<span></span>{ year }}.</code> {{ icon_arrow_right }} The year was 2018.

</div>

==MarkBind variables are _global_==; they are available from anywhere in the code base.

**MarkBind provides a number of built-in variables.**


### Built-in Global Variables

##### Built-in Variable: `baseUrl`

Represents the root directory of the project. Used for specifying intra-site links.

<panel type="seamless" header="User Guide: MarkBind Syntax → Intra-Site Links">
  <include src="links.mbdf#intraSiteLinks" />
</panel>


##### Built-in Variable: `timestamp`

<code>{<span></span>{ timestamp }}</code> is the time stamp that indicates when the page was generated.

The default values of `"timeZone"` and `"locale"` are `"UTC"` and `"en-GB"` respectively. The following example showcases the use of the `"Asia/Singapore"` time zone.

<div class="indented">

{{ icon_example }} <code>Page generated at: {<span></span>{ timestamp }}</code> {{ icon_arrow_right }} Page generated at: {{ timestamp }}
</div>

<p/>


##### Built-in Variable: `MarkBind`

<code>{<span></span>{MarkBind}}</code> represents a code snippet that specifies the MarkBind version in use and is linked to the MarkBind website.

<div class="indented">

{{ icon_example }} <code>Page generated by: {<span></span>{ MarkBind }}</code>  {{ icon_arrow_right }} Page generated by: {{ MarkBind }}
</div>

<p/>


##### Variables: Defaults

You can specify a default value for a variable, which is displayed when the variable is not specified in `variables.md` and by any of the [includes]({{ baseUrl }}/userGuide/reusingContents.html#the-include-tag) of the page. This is done by adding `or defaultValue` within the curly braces.

<div class="indented">

{{ icon_example }} If `name` is not declared in `variables.md`:<br>
<code>My name is {<span></span>{ name or "Anonymous" }}.</code> {{ icon_arrow_right }} My name is Anonymous.
</div>


### Page Variables

**You can also declare variables for use within a single page.** These variables work exactly the same as regular variables, except that their values only apply to the page they are declared in. This can be done by using the `<variable>` tag.

<div class="indented">

{{ icon_example }} Declaring page variables:<br>

`<variable name="full_name">John Doe</variable>`<br>
<code>My name is {<span></span>{ full_name }}. This is {<span></span>{ full_name }}'s site.</code>
</div>

Note: These variables will not be applied to [`<include>` files]({{ baseUrl }}/userGuide/reusingContents.html#the-include-tag). Additionally, global variables (`_markbind/variables.md`) will take precedence over any page variables. *See also: [Specifying Variables in an `<include>`]({{ baseUrl }}/userGuide/reusingContents.html#specifying-variables-in-an-include)*.

### Importing Variables

**You can access [page variables](#page-variables) from another page by importing them.**


{{ icon_example }} Importing specific variables from `person.md` into `coverpage.md`:
`person.md`:
```html
<variable name="address">123 Sun Avenue</variable>
<variable name="name">Mark</variable>
<variable name="phone">123456789</variable>
```

`coverpage.md`:

```html
<import address name from="person.md"/>
```

will allow you to access the variables as per normal: <code>{<span></span>{address}}</code>, <code>{<span></span>{name}}</code>, <code>{<span></span>{phone}}</code>.

---

**When importing all variables, you should attach a _namespace_** to the imported variables using an `as` attributes.


{{ icon_example }}:
`coverpage.md`:
```html
<import from="page.md" as="details"/>
```

|    Detail    | How to access         
| :------------- |:-------------
| address | <code>{<span></span>{details.address}}</code>
| name | <code>{<span></span>{details.<span></span>name}}</code>
| phone | <code>{<span></span>{details.phone}}</code>

This way, ***all*** variables in `page.md` are accessible via <code>{<span></span>{details.&lt;variable_name&gt;}}</code>.

Note that in this case, `details` is treated as the variable name and so is subject to the same rules as other variables, such as global variables taking precedence, and multiple imports to the same namespace being impossible:

```html
<import from="title.md" as="book"/>
<import from="index.md" as="book"/>
```

In this case, all the variables in `title.md` are not accessible, as they are overwritten with the variables from `index.md`.

<box type="important">

Note that global variables (`_markbind/variables.md`) and [page variables](#page-variables) will take precedence over any imported variables.

While you can mix the two syntaxes for importing page variables, it may get confusing:
```html
<import address name from="page.md" as="details"/>
```

This may seem like it will import *only* `address` and `name` from `page.md` and storing them in the namespace `details`.

However, this is a combination of *both* syntaxes above, and thus this will allow you to:

- access `address` and `name` (but NOT `phone`) with <code>{<span></span>{address}}</code> and <code>{<span></span>{name}}</code>
- access `address`, `name`, and `phone` with <code>{<span></span>{details.address}}</code>, <code>{<span></span>{details.<span></span>name}}</code>, and <code>{<span></span>{details.phone}}</code>

</box>

### Variables: Tips and Tricks

**Variables can refer to other variables** that are declared earlier, including built-in variables.

<div class="indented">

{{ icon_example }} This variable uses a built-in variable:<br>
`<variable name="time">`<code>{<span></span>{ timestamp }}</code>`</variable>`

Here, the second variable will be assigned the contents of the first variable.<br>
`<variable name="first">`<code>This is the first variable.</code>`</variable>`<br>
`<variable name="second">`<code>{<span></span>{ first }}</code>`</variable>`<br>

This will not work, as the `fourth` variable is declared _below_ the line that refers to it.<br>
`<variable name="third">`<code>{<span></span>{ fourth }}</code>`</variable>` :x:<br>
`<variable name="fourth">`<code>This is the fourth variable.</code>`</variable>`
</div>

Note that if the variable being referenced contains HTML tags, MarkBind may escape the tags and render it literally.

<div class="indented">

{{ icon_example }} If we declare the variables as follows,<br>

`<variable name="note">`<code>\<span style="color: blue">Note: \</span></code>`</variable>`<br>
`<variable name="note_2">`<code>{<span></span>{ note }}</code>`</variable>`<br>
`<variable name="const_note">`<code>{<span></span>{ note_2 }} This is a constant.</code>`</variable>`

the result will be,<br>

<code>{<span></span>{ const_note }}</code> :fas-arrow-right: \<span style="color: blue">Note: \</span> This is a constant.
</div>

You must use the `safe` filter when using such variables:

<div class="indented">

{{ icon_example }} If we use the safe filter for the second variable:<br>

`<variable name="note">`<code>\<span style="color: blue">Note: \</span></code>`</variable>`<br>
`<variable name="note_2">`<code>{<span></span>{ note | safe }}</code>`</variable>`<br>
`<variable name="const_note">`<code>{<span></span>{ note_2 }} This is a constant.</code>`</variable>`

<code>{<span></span>{ const_note }}</code> :fas-arrow-right: <span style="color: blue">Note: </span> This is a constant.
</div>

<span id="short" class="d-none">

Global variables:

`_markbind/variables.md`:
```html
<variable name="year">2018</span>
```

<code>The year was {<span></span>{ year }}.</code>

Page variables:<br>
`<variable name="full_name">John Doe</variable>`{.html}

<code>The name was {<span></span>{ full_name }}.</code>


</span>
