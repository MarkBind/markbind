<span id="link" class="d-none">
<md>[_User Guide → Reusing Contents → Includes_]({{ baseUrl }}/userGuide/reusingContents.html#includes)</md>
</span>

## Includes

<span id="overview">

**MarkBind has a powerful `<include>` mechanism** which allows you to create documents by combining other content fragments.
</span>

**You can use `<include>` tag to include another markdown or HTML document into the current document.**

<div class="indented">

{{ icon_example }} Including text from a `tip2.md` in another file.
```html
Tip 1. ...
<include src="tips/tip2.md" />
Tip 3. ...
```
</div>

**You can `<include>` a fragment of a file** by specifying the `#fragment-id` at the end of the `src` attribute value, provided the fragment is wrapped in a `<div>`/`<span>`/`<seg>` tag with the matching `id`.

<div class="indented">

{{ icon_example }} Including a fragment from a file:
```html
Some text
<include src="docs/tips.md#tip-1" />
Some other text
```

`docs/tips.md`:
```html
...
<div id="tip-1" />
  Tip 1. ...
  ...
</div>
Tip 2. ...
```
</div>

<box type="warning">

When setting the `id` of a fragment, be careful not to clash with heading anchor IDs auto-generated by MarkBind. For example, if you have a heading `## Some Useful Tips`, MarkBind will auto-generate an ID `some-useful-tips` for that heading.

</box>


<box border-left-color="{{ markbind_blue}}">

{{ icon_bulb_blue }} The `<include>` tag works for any MarBind source file including the _font matter_ section but it may not work in some _special_ files such as the `_markbind/variables.md`.
</box>

**Attributes:**
* **`src`**: specify the source file path.
* **`inline`** (optional): make the included result an inline element. (wrapped in `<span>` tag). e.g.,
  ```html
  The title is <include src="../docs/summary.md#title" inline /> while ...
   ```
* **`optional`** (optional): include the file/fragment only if it exists i.e., there will be no error message if the file/fragment does not exist. e.g.,
  ```html
  <include src="UserStories.md" optional />
  ```
* **`trim`** (optional): remove leading and trailing whitespace and newlines from the document before including.
  ```html
  <include src="UserStories.md#epic" trim />
  ```

<include src="tip.md" boilerplate >
<span id="tip_body">
The `<include>` mechanism can be used inside any MarkBind source file (even inside the _front matter_ section) but it will not work inside some _special_ files such as the `_markbind/variables.md`.
</span>
</include>

##### `<include>` Inside an Included File

**Although the `src` attribute of an `<include>` is given _relative_ to the current directory, it is converted to an _absolute_ value _before_ the <tooltip content="i.e., the file containing the `<include>`">host file</tooltip> is included from another file.**

<div class="indented">

{{ icon_example }} Suppose you have a MarkBind project with the following file structure.
```
c:/mySite/
  ├── bookFiles/
  |      ├── book.md
  |      ├── chapter1.md
  |      └── chapter2.md
  └── reviewFiles/
         └── review.md
```
The `book.md`:
```markdown
# My Book
<include src="chapter1.md" />
<include src="chapter2.md" />
```
The `review.md`:

```markdown
# My Review
<include src="../bookFiles/book.md" />
...
```

The content of the `chapter1.md` and `chapter2.md` will be included in the `review.md` (via `<include src="../bookFiles/book.md" />`) although `chapter1.md` and `chapter2.md` are not in `reviewFiles` directory. i.e., `<include src="chapter1.md" />` will be interpreted as `<include src="c:/mySite/bookFiles/chapter1.md" />`
</div>

In other words, **`<include>` interprets the reused code relative to the original location of the file, not the location in which it is reused.**

<hr><!-- ======================================================================================================= -->

##### Specifying Variables in an `<include>`

**It is possible to include variables in an `<include>`.**

<div class="indented">

{{ icon_example }} Specifying `title` and `author` variables in an `<include>` tag:

```html
<include src="article.md">
  <variable name="title">My Title</variable>
  <variable name="author">John Doe</variable>
</include>
```

In `article.md`:

<code>
# {<span></span>{ title }}<br>
Author: {<span></span>{ author }}
</code>
</div>

These variables work the same way as variables in `_markbind/variables.md`, except that they only apply to the included file. They allow the included file to be reused as a template, for different source files using different variable values.

You can also specify include variables within the `<include>` tag itself by adding a `var-` prefix.

<div class="indented">

{{ icon_example }} Specifying `title` and `author` variables inline:
```html
<include src="article.md" var-title="My Title" var-author="John Doe" />
```
</div>

If the same variable is defined in a chain of `<include>`s (e.g. `a.md` includes `b.md` includes `c.md`...), variables defined in the top-most `<include>` will take precedence. Global variables (`_markbind/variables.md`) will take precedence over any `<include>` variables.

### Using Boilerplate Files

**If you find duplicating a <tooltip content="code that needs to stay relative to the directory in which it used">_boilerplate code_</tooltip> fragment in multiple places of your code base, you can use a `boilerplate` file to avoid such duplication.** Note that you cannot use a normal `<include>` in this case because the code included using a normal `<include>` stays relative to the original location while boilerplate code needs to be interpreted relative to the location it is being used.

<div class="indented">

{{ icon_example }} Suppose you have a MarkBind project with the following file structure.
```
c:/mySite/
  ├── chapter1/
  |      ├── chapter.md
  |      ├── text.md
  |      └── exercises.md
  ├── chapter2/
  |      ├── chapter.md
  |      ├── text.md
  |      └── exercises.md
  └── book.md
```
The `book.md`:
```markdown
# My Book
<include src="chapter1/chapter.md" />
<include src="chapter2/chapter.md" />
```
The `chapter1/chapter.md`:

```markdown
## Text
<include src="text.md" />
## Exercises
<include src="exercises.md" />
```
The `chapter2/chapter.md`:

```markdown
## Text
<include src="text.md" />
## Exercises
<include src="exercises.md" />
```

As you can see, both `chapter.md` files are exactly the same. If we were to use only one of the `chapter.md` files and `<include>` it twice in the `book.md`, we'll end up with the same chapter content duplicated twice, which is not what we want. In other words, `chapter.md` contains boilerplate code that needs to be interpreted relative to where it is applied, once relative to `chapter1` directory and once relative to `chapter2` directory.
</div>

To use a code fragment as a boilerplate file,
1. Put the code in a file inside the `_markbind/boilerplates` directory.
2. `<include>` the file _as if_ a copy of it exists in any directory you want it to applied, but add the `boilerplate` attribute to the `<include>` tag.

<div class="indented">

{{ icon_example }} Here's how you can use a boilerplate file to avoid duplicating the `chapter.md`:
```
c:/mySite/
  ├── _markbind/boilerplates/
  |      └── chapter.md
  ├── chapter1/
  |      ├── text.md
  |      └── exercises.md
  ├── chapter2/
  |      ├── text.md
  |      └── exercises.md
  └── book.md
```
The `book.md`:
```markdown
# My Book
<include src="chapter1/chapter.md" boilerplate />
<include src="chapter2/chapter.md" boilerplate />
```
The `_markbind/boilerplates/chapter.md`:

```markdown
## Text
<include src="text.md" />
## Exercises
<include src="exercises.md" />
```

Consider the line `<include src="chapter1/chapter.md" boilerplate />`. Note how you can use `src="chapter1/chapter.md"` there is no such file. MarkBind will use the `chapter.md` file `/_markbind/boilerplates/` but interpret it as if the file exist in `chapter1` directory (i.e., interpret the `chapter1.md` code relative to the `chapter1` directory.

Similarly, `<include src="chapter2/chapter.md" boilerplate />` interprets the `chapter.md` relative to the `chapter2` directory.
</div>

If you have many boilerplate files, you can organize them into directories inside the `_markbind` directory. When using such boilerplate files, you need to replace `boilerplate` attribute with `boilerplate="<path to file relative to _markbind/boilerplates>"`.

<div class="indented">

{{ icon_example }} Suppose the `chapter.md` is places in a `book` directory:
```
c:/mySite/
  └── _markbind/boilerplates/
         └── book/
               └── chapter.md

```

It needs to be used as follows:
```markdown
<include src="chapter1/chapter.md" boilerplate="book/chapter.md" />
<include src="chapter2/chapter.md" boilerplate="book/chapter.md" />
```
</div>


<span id="short" class="d-none">

```markdown
<include src="foo.md#bar" boilerplate inline trim>
  <variable name="x">5</variable>
</include>
```
</span>
