## Code

#### Themes
MarkBind can present formatted code blocks, be it fenced or inline, with either **light** or **dark** themes. The default is dark.

Refer [here](../siteJsonFile.html#style) for configuring MarkBind to use a specific theme for the code blocks.

#### Fenced Code
MarkBind provides several features, some of which are added on top of the existing functionality of Markdown's _fenced code blocks_.

<small>More info: https://www.markdownguide.org/extended-syntax#fenced-code-blocks</small>


Features:
- Syntax coloring
- Line numbering
- Line highlighting
- Code block headers

##### Syntax coloring
To enable syntax coloring, specify a language next to the backticks before the fenced code block.
<div id="main-example">
<include src="codeAndOutputCode.md" boilerplate >
<variable name="code">

```xml
<foo>
  <bar type="name">goo</bar>
</foo>
```
</variable>
</include>
</div>

##### Line numbering
Line numbers are provided by default. To hide line numbers, add the class `no-line-numbers` to the code block as below

<include src="codeAndOutputCode.md" boilerplate >
<variable name="code">

```xml {.no-line-numbers}
<foo>
  <bar type="name">goo</bar>
</foo>
```
</variable>
</include>

You can have your line numbers start with a value other than `1` with the `start-from` attribute.

<include src="codeAndOutputCode.md" boilerplate >
<variable name="code">

```js {start-from=6}
function add(a, b) {
    return a + b;
}
```
</variable>
</include>


##### Line highlighting
You can add the `highlight-lines` attribute to add highlighting to your code block. Refer to the example below for
a typical usage of the attribute.

The value of `highlight-lines` is composed of *highlight rules*, separated by commas.
These rules dictate where and how MarkBind should highlight your code block. 

You can specify the rules in many different ways, depending on how you want it to be. There are three main variants:
full text, partial text, or full line highlighting.

**Full text highlighting**

To highlight the entirety of the text portion of the line, you can just use the line numbers as is, such as `3`.
Note that the numbers should correspond with the line numbers that will be displayed, so if you have changed the
numbering via the `start-from` attribute, you will have to follow that numbering as well.

For text-only range highlighting, join the two line numbers with a dash sign (`-`).

**Partial text highlighting**

You can also highlight just a part of the text portion of the line. MarkBind has a _line-slice_ syntax to help you
with that.

The line-slice syntax is of the form `lineNumber[start:end]`, where `lineNumber` is the line number (subject to the
numbering conditions as explained above), `start` and `end` denote the range of character positions
that will be highlighted.

Character positions start from `0`, which denotes the first non-whitespace character in the line, upwards.
Note that the highlight includes character at `start` but does not include character at `end`.

You can omit either `start` or `end` to tell MarkBind either to highlight from the start or until the end, respectively.

Also, you can start or end a text-only range highlight with a line-slice syntax to indicate partial text
highlight at the beginning or end of the range, respectively.

**Full line highlighting**

If you wish to highlight a full line (which includes indentations), you can use the line-slice syntax as well,
but with `start` *and* `end` omitted. We call this the empty line-slices.

To do a full-line range highlighting, you only need to use empty line-slices on either ends of the usual
text-only range highlight.

<include src="codeAndOutputCode.md" boilerplate >

<variable name="code">

```java {highlight-lines="1[:],3,4[8:18],6[:]-8,10-12,14[12:],18[12:]-20"}
import java.util.List;

public class Inventory {
    private List<Item> items;

    public int getItemCount(){
        return items.size();
    }
    
    public bool isEmpty() {
        return items.isEmpty();
    }

    public Item getItem(idx: int) {
        return items.get(idx);
    }

    public void addItem(item: Item) {
        return items.add(item);
    }
}
```
</variable>
</include>

##### Heading
To add a heading, add the attribute `heading` with the heading text as the value, as shown below.

<include src="codeAndOutputCode.md" boilerplate >
<variable name="code">

```xml {heading="Heading title"}
<foo>
  <bar type="name">goo</bar>
</foo>
```
</variable>
</include>

Headings support inline Markdown, except for `Inline Code` and %%Dim%% text styles.

<include src="codeAndOutputCode.md" boilerplate >
<variable name="code">

```{heading="**Bold**, _Italic_, ___Bold and Italic___, ~~Strike through~~, ****Super Bold****, $$Underline$$, ==Highlight==, :+1: :exclamation: :x: :construction:<br>We support page breaks"}
<foo></foo>
```
</variable>
</include>

##### Using multiple features
You can also use multiple features together, as shown below.

<include src="codeAndOutputCode.md" boilerplate >
<variable name="code">

```xml {highlight-lines="2" heading="Heading title"}
<foo>
  <bar type="name">goo</bar>
</foo>
```
</variable>
</span>
</include>

#### Inline Code
##### Syntax coloring


MarkBind can apply syntax-coloring on inline code too.

<include src="codeAndOutput.md" boilerplate >
<variable name="code">
Consider the xml code `<bar type="name">goo</bar>`{.xml},<br>
or the java code `public static void main(String[] args)`{.java}.
</variable>
</include>

<span id="short" class="d-none">

````
```xml
<foo>
  <bar type="name">goo</bar>
</foo>
```
````
```
`<bar type="name">goo</bar>`{.xml}
```
</span>
<span id="examples" class="d-none">

```xml
<foo>
  <bar type="name">goo</bar>
</foo>
```
Syntax coloring for inline code: `<bar type="name">goo</bar>`{.xml} too!

</span>
