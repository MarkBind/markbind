## Code

#### Themes
MarkBind can present formatted code blocks, be it fenced or inline, with either **light** or **dark** themes. The default is dark.

Refer [here](../siteJsonFile.html#style) for configuring MarkBind to use a specific theme for the code blocks.

#### Fenced Code
MarkBind provides several features, some of which are added on top of the existing functionality of Markdown's _fenced code blocks_.

<small>More info: https://www.markdownguide.org/extended-syntax#fenced-code-blocks</small>


Features:
- Syntax coloring
- Line numbering
- Line highlighting
- Code block headers

##### Syntax coloring
To enable syntax coloring, specify a language next to the backticks before the fenced code block.
<div id="main-example">
<include src="codeAndOutputCode.md" boilerplate >
<variable name="code">

```xml
<foo>
  <bar type="name">goo</bar>
</foo>
```
</variable>
</include>
</div>

##### Line numbering
Line numbers are provided by default. To hide line numbers, add the class `no-line-numbers` to the code block as below

<include src="codeAndOutputCode.md" boilerplate >
<variable name="code">

```xml {.no-line-numbers}
<foo>
  <bar type="name">goo</bar>
</foo>
```
</variable>
</include>

You can have your line numbers start with a value other than `1` with the `start-from` attribute.

<include src="codeAndOutputCode.md" boilerplate >
<variable name="code">

```js {start-from=6}
function add(a, b) {
    return a + b;
}
```
</variable>
</include>


##### Line highlighting
To highlight lines, add the attribute `highlight-lines` as shown below.

You can specify highlighting in many different ways, depending on how you want it to be. There are two main variants:

**Text-only highlighting**

To highlight only the text portion of the line, you can just use the line numbers as is.

For ranges of lines, join the two line numbers with a dash sign (`-`).

**Whole-line highlighting**

If you wish to highlight a full line (including whitespaces) or ranges of it, you can leverage MarkBind's own _line-slice_ syntax. Line-slices are in the form of `lineNumber[:]`, e.g. `2[:]`.
    
This variant's format is very similar to the previous, but instead use line-slices rather than line numbers.

For ranges, you only need to use line-slices on either ends.

<include src="codeAndOutputCode.md" boilerplate >

<variable name="code">

```java {highlight-lines="1,3[:],6-8,10[:]-12"}
import java.util.List;

public class Inventory {
    private List<Item> items;

    public int getItemCount(){
        return items.size();
    }
    
    public bool isEmpty() {
        return items.isEmpty();
    }

    //...
}
```
</variable>
</include>

##### Heading
To add a heading, add the attribute `heading` with the heading text as the value, as shown below.

<include src="codeAndOutputCode.md" boilerplate >
<variable name="code">

```xml {heading="Heading title"}
<foo>
  <bar type="name">goo</bar>
</foo>
```
</variable>
</include>

Headings support inline Markdown, except for `Inline Code` and %%Dim%% text styles.

<include src="codeAndOutputCode.md" boilerplate >
<variable name="code">

```{heading="**Bold**, _Italic_, ___Bold and Italic___, ~~Strike through~~, ****Super Bold****, ++Underline++, ==Highlight==, :+1: :exclamation: :x: :construction:<br>We support page breaks"}
<foo></foo>
```
</variable>
</include>

##### Using multiple features
You can also use multiple features together, as shown below.

<include src="codeAndOutputCode.md" boilerplate >
<variable name="code">

```xml {highlight-lines="2" heading="Heading title"}
<foo>
  <bar type="name">goo</bar>
</foo>
```
</variable>
</span>
</include>

#### Inline Code
##### Syntax coloring


MarkBind can apply syntax-coloring on inline code too.

<include src="codeAndOutput.md" boilerplate >
<variable name="code">
Consider the xml code `<bar type="name">goo</bar>`{.xml},<br>
or the java code `public static void main(String[] args)`{.java}.
</variable>
</include>

<span id="short" class="d-none">

````
```xml
<foo>
  <bar type="name">goo</bar>
</foo>
```
````
```
`<bar type="name">goo</bar>`{.xml}
```
</span>
<span id="examples" class="d-none">

```xml
<foo>
  <bar type="name">goo</bar>
</foo>
```
Syntax coloring for inline code: `<bar type="name">goo</bar>`{.xml} too!

</span>
