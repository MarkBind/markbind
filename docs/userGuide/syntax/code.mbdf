## Code

#### Fenced Code
MarkBind provides several features, some of which are added on top of the existing functionality of Markdown's _fenced code blocks_.

<small>More info: https://www.markdownguide.org/extended-syntax#fenced-code-blocks</small>


Features:
- Syntax coloring
- Line numbering
- Line highlighting
- Code block headers

##### Syntax coloring
To enable syntax coloring, specify a language next to the backticks before the fenced code block.
<span id="main-example">
<include src="outputBox.md" boilerplate >
<span id="code">

```` {.no-line-numbers}
```xml
<foo>
  <bar type="name">goo</bar>
</foo>
```
````
</span>
<span id="output">

```xml
<foo>
  <bar type="name">goo</bar>
</foo>
```
</span>
</include>
</span>

##### Line numbering
Line numbers are provided by default. To hide line numbers, add the class `no-line-numbers` to the code block as below

<include src="outputBox.md" boilerplate >
<span id="code">

```` {.no-line-numbers}
```xml {.no-line-numbers}
<foo>
  <bar type="name">goo</bar>
</foo>
```
````
</span>
<span id="output">

```xml {.no-line-numbers}
<foo>
  <bar type="name">goo</bar>
</foo>
```
</span>
</include>

You can have your line numbers start with a value other than `1` with the `start-from` attribute.

<include src="outputBox.md" boilerplate >
<span id="code">

```` {.no-line-numbers}
```js {start-from=6}
function add(a, b) {
    return a + b;
}
```
````
</span>
<span id="output">

```js {start-from=6}
function add(a, b) {
    return a + b;
}
```
</span>
</include>


##### Line highlighting
To highlight lines, add the attribute `highlight-lines` with the line numbers as value, as shown below. You can specify ranges or individual line numbers.

<include src="outputBox.md" boilerplate >
<span id="code">

```` {.no-line-numbers}
```java {highlight-lines="2,4,6-8"}
import java.util.List;

public class Inventory {
    private List<Item> items;

    public int getItemCount(){
        return items.size();
    }

    //...
}
```
````
</span>
<span id="output">

```java {highlight-lines="2,4,6-8"}
import java.util.List;

public class Inventory {
    private List<Item> items;

    public int getItemCount(){
        return items.size();
    }

    //...
}
```
</span>
</include>

##### Heading
To add a heading, add the attribute `heading` with the heading text as the value, as shown below.

<include src="outputBox.md" boilerplate >
<span id="code">

```` {.no-line-numbers}
```xml {heading="Heading title"}
<foo>
  <bar type="name">goo</bar>
</foo>
```
````
</span>
<span id="output">

```xml {heading="Heading title"}
<foo>
  <bar type="name">goo</bar>
</foo>
```
</span>
</include>

##### Using multiple features
You can also use multiple features together, as shown below.

<include src="outputBox.md" boilerplate >
<span id="code">

```` {.no-line-numbers}
```xml {highlight-lines="2" heading="Heading title"}
<foo>
  <bar type="name">goo</bar>
</foo>
```
````
</span>
<span id="output">

```xml {highlight-lines="2" heading="Heading title"}
<foo>
  <bar type="name">goo</bar>
</foo>
```
</span>
</include>

#### Inline Code
##### Syntax coloring


MarkBind can apply syntax-coloring on inline code too.

<include src="outputBox.md" boilerplate >
<span id="code">

```
Consider the xml code `<bar type="name">goo</bar>`{.xml},
or the java code `public static void main(String[] args)`{.java}.
```

</span>
<span id="output">

Consider the xml code `<bar type="name">goo</bar>`{.xml},<br>
or the java code `public static void main(String[] args)`{.java}.
</span>
</include>

<span id="short" class="d-none">
````
```xml
<foo>
  <bar type="name">goo</bar>
</foo>
```
````
```
`<bar type="name">goo</bar>`{.xml}
```
</span>
<span id="examples" class="d-none">

```xml
<foo>
  <bar type="name">goo</bar>
</foo>
```
Syntax coloring for inline code: `<bar type="name">goo</bar>`{.xml} too!

</span>
