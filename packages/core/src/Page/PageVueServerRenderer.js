const Vue = require('vue');
const path = require('path');
const fs = require('fs-extra');

const VueCompiler = require('vue-template-compiler');
const { renderToString } = require('vue-server-renderer').createRenderer();

let bundle = require('@markbind/core-web/dist/js/vueCommonAppFactory.min');

const logger = require('../utils/logger');

const pageEntries = {}; // hold the mapping of sourcePath to latest built pages (for hot-reload dev purposes)

/**
 * Compiles page into Vue Application to get the page render function and places
 * it into a script so that the browser can retrieve the page render function to
 * render the page during Vue mounting.
 *
 * This is to avoid the overhead of compiling the page into Vue application
 * on the client's browser (alleviates FOUC). It is also the pre-requisite to enable SSR.
 *
 * @param content Page content to be compiled into Vue app
 */
async function compileVuePageAndCreateScript(content, pageConfig, pageAsset) {
  // Compile Vue Page
  const compiledVuePage = VueCompiler.compileToFunctions(content);

  // Set up script content
  const outputContent = `
    var pageVueRenderFn = ${compiledVuePage.render};
    var pageVueStaticRenderFns = [${compiledVuePage.staticRenderFns}];
  `;

  // Get script file name
  const pageHtmlFileName = path.basename(pageConfig.resultPath, '.html');
  const scriptFileName = `${pageHtmlFileName}.page-vue-render.js`;

  /*
   * Add the script file path for this page's render function to the page's assets (to populate page.njk).
   * The script file path is the same as the page's file path.
   */
  pageAsset.pageVueRenderJs = scriptFileName;

  // Get script's absolute file path to output script file
  const dirName = path.dirname(pageConfig.resultPath);
  const filePath = path.join(dirName, scriptFileName);

  await fs.outputFile(filePath, outputContent);

  return compiledVuePage;
}

/**
 * Renders Vue page app into html string (Vue SSR).
 * This function will install the MarkBindVue plugin and render the built Vue page content into html string.
 */
async function renderVuePage(compiledVuePage) {
  const { MarkBindVue, appFactory } = bundle;

  const { components, directives } = MarkBindVue;

  const VueAppPage = new Vue({
    render(createElement) {
      return compiledVuePage.render.call(this, createElement);
    },
    staticRenderFns: compiledVuePage.staticRenderFns,
    components,
    directives,
    ...appFactory(),
  });

  return renderToString(VueAppPage);
}

/**
 * Referenced from stackOverflow:
 * https://stackoverflow.com/questions/17581830/load-node-js-module-from-string-in-memory
 *
 * Credits to Dominic
 */
function requireFromString(src, filename) {
  const m = new module.constructor();
  m.paths = module.paths; // without this, we won't be able to require Vue in the string module
  m._compile(src, filename);
  return m.exports;
}

/**
 * Retrieves the latest updated MarkBindVue bundle from webpack compiler watcher,
 * re-render all the built pages, and output the page html files.
 * This function will only be used in development mode (for MarkBindVue bundle hot-reloading purposes).
 */
async function updateMarkBindVueBundle(newBundle) {
  logger.info(`Changes detected in MarkBind Vue Source Files: 
Bundle is regenerated by webpack and built pages are re-rendered with the latest bundle.`);

  // reassign the latest updated MarkBindVue bundle
  bundle = requireFromString(newBundle, '');

  Object.values(pageEntries).forEach(async (pageEntry) => {
    const { page, compiledVuePage, pageNav } = pageEntry;
    const renderedVuePageContent = await renderVuePage(compiledVuePage);
    page.outputPageHtml(renderedVuePageContent, pageNav);
  });
}

const pageVueServerRenderer = {
  compileVuePageAndCreateScript,
  renderVuePage,
  updateMarkBindVueBundle,
  pageEntries,
};

module.exports = {
  pageVueServerRenderer,
};
